{"remainingRequest":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikael/Documents/engcssummercampsite/src/components/Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"/Users/mikael/Documents/engcssummercampsite/src/components/Home.vue","mtime":1628998157789},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}