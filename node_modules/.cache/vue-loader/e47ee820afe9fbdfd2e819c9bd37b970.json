{"remainingRequest":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikael/Documents/engcssummercampsite/src/components/studentp.vue?vue&type=template&id=55765d3e&","dependencies":[{"path":"/Users/mikael/Documents/engcssummercampsite/src/components/studentp.vue","mtime":1628999578668},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPHNlY3Rpb24KICAgIGlkPSJzdHVkZW50IgogICAgY2xhc3M9IgogICAgICBoLWZ1bGwKICAgICAgY29sLXNwYW4tMTIKICAgICAgc206Y29sLXNwYW4tMTIKICAgICAgbWQ6Y29sLXNwYW4tNgogICAgICBsZzpjb2wtc3Bhbi02CiAgICAgIHh4bDpjb2wtc3Bhbi02CiAgICAgIGgtZnVsbAogICAgICBweC0xNgogICAgICBweS02CiAgICAiCiAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzZjODFhNSIKICA+CiAgICA8aGVhZGVyPgogICAgICA8ZGl2IGNsYXNzPSJmbGV4Ij4KICAgICAgICA8ZGl2PgogICAgICAgICAgPCEtLSA8aW1nIGNsYXNzPSJsb2dvIiBzcmM9Ii4vYXNzZXRzL2xvZ28ucG5nIiAvPiAtLT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPCEtLSA8cm91dGVyLWxpbmsgOnRvPSJ7IG5hbWU6ICdTdHVkZW50V29yaycgfSI+QWJvdXQ8L3JvdXRlci1saW5rPiAtLT4KICAgICAgICAgIDwhLS0gPHJvdXRlci12aWV3Pjwvcm91dGVyLXZpZXc+IC0tPgogICAgICAgICAgPHJvdXRlci1saW5rCiAgICAgICAgICAgIHRvPSIvIgogICAgICAgICAgICBjbGFzcz0idGV4dC13aGl0ZSBmb250LXNlbWlib2xkIHRleHQtbGcgaG92ZXI6dGV4dC1ibHVlLTQwMCIKICAgICAgICAgICAgPkJhY2sgaG9tZTwvcm91dGVyLWxpbms+CgogICAgICAgICAgPCEtLSA8cm91dGVyLWxpbmsgOnRvPSIvc3R1ZGVudHdvcmsiIGNsYXNzPSJ0ZXh0LXdoaXRlIGZvbnQtc2VtaWJvbGQgdGV4dC1sZyBob3Zlcjp0ZXh0LWJsdWUtNDAwIj4gU3R1ZGVudCBQb3J0Zm9saW9zPC9yb3V0ZXItbGluaz4gLS0+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CiAgICA8ZGl2PgogICAgICA8ZGl2IGNsYXNzPSJyZWxhdGl2ZSBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiPgogICAgICAgIDxoMSBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC03eGwgZm9udC1ib2xkIHAtNCB0ZXh0LXdoaXRlIj4KICAgICAgICAgIFN0dWRlbnQgUG9ydGZvbGlvcyEKICAgICAgICA8L2gxPgogICAgICAgIDxkaXYgY2xhc3M9ImxnOmZsZXggaXRlbXMtY2VudGVyIGNvbnRhaW5lciBteC1hdXRvIG15LWF1dG8iPgogICAgICAgICAgPCEtLSBBbGlzaGEgTmljb2xlIFBvbGFuY28gR3V0acOpcnJleiAtLT4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgIGxnOm0tNAogICAgICAgICAgICAgIHNoYWRvdy1tZAogICAgICAgICAgICAgIGhvdmVyOnNoYWRvdy1sZwogICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktMTAwCiAgICAgICAgICAgICAgcm91bmRlZC1sZwogICAgICAgICAgICAgIGJnLXdoaXRlCiAgICAgICAgICAgICAgbXktMTIKICAgICAgICAgICAgICBteC04CiAgICAgICAgICAgICI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtNCI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LW1lZGl1bSB0ZXh0LWJsYWNrIHRleHQtbGcgbXktMiB1cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgQWxpc2hhIE5pY29sZSBQb2xhbmNvIEd1dGnDqXJyZXoKICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgTWkgbm9tYnJlIGVzIEFsaXNoYSBQb2xhbmNvLCB0ZW5nbyAxNyBhw7Fvcy4gTm8gbG8gcHLDoWN0aWNvLAogICAgICAgICAgICAgICAgcGVybyBjcmVvIHF1ZSBtZSBndXN0YXLDrWEgZWwgdGVuaXMuIEFsZ8O6biBkw61hIG1lIGd1c3RhcsOtYSBzZXIKICAgICAgICAgICAgICAgIGRvY3RvcmEuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTUiPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9jc3N1bW1lcmNhbXBkLXIuZ2l0aHViLmlvL2FsaXNoYXBvcnRmb2xpbzIxLyIKICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktNzAwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1mdWxsCiAgICAgICAgICAgICAgICAgICAgcHktMgogICAgICAgICAgICAgICAgICAgIHB4LTMKICAgICAgICAgICAgICAgICAgICBmb250LXNlbWlib2xkCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6dGV4dC13aGl0ZQogICAgICAgICAgICAgICAgICAgIGJnLWdyYXktNDAwCiAgICAgICAgICAgICAgICAgICAgdGV4dC1ncmF5LTEwMAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID5TZWUgcG9ydGZvbGlvPC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tIEFuYSBZdWRlbGthIENhYnJlcmEgLS0+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICBsZzptLTQKICAgICAgICAgICAgICBzaGFkb3ctbWQKICAgICAgICAgICAgICBob3ZlcjpzaGFkb3ctbGcKICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTEwMAogICAgICAgICAgICAgIHJvdW5kZWQtbGcKICAgICAgICAgICAgICBiZy13aGl0ZQogICAgICAgICAgICAgIG15LTEyCiAgICAgICAgICAgICAgbXgtOAogICAgICAgICAgICAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtNCI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LW1lZGl1bSB0ZXh0LWJsYWNrIHRleHQtbGcgbXktMiB1cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgQW5hIFl1ZGVsa2EgQ2FicmVyYQogICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSI+CiAgICAgICAgICAgICAgICBNeSBuYW1lIGlzIEFuYS4gSSBhbSAxNSB5ZWFycyBvbGQgYW5kIEkgbGlrZSBrcG9wLAogICAgICAgICAgICAgICAgc3BvcnRzLCBhbmQgbGVhcm4gYWJvdXQgb3RoZXIgY3VsdHVyZXMgaW4gdGhlIHdvcmxkLgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vY3NzdW1tZXJjYW1wZC1yLmdpdGh1Yi5pby9hbmFwb3J0Zm9saW8yMS8iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTcwMAogICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtZnVsbAogICAgICAgICAgICAgICAgICAgIHB5LTIKICAgICAgICAgICAgICAgICAgICBweC0zCiAgICAgICAgICAgICAgICAgICAgZm9udC1zZW1pYm9sZAogICAgICAgICAgICAgICAgICAgIGhvdmVyOnRleHQtd2hpdGUKICAgICAgICAgICAgICAgICAgICBiZy1ncmF5LTQwMAogICAgICAgICAgICAgICAgICAgIHRleHQtZ3JheS0xMDAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+U2VlIHBvcnRmb2xpbzwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSBCaWFubmVseSBUb3JpYmlvIC0tPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgbGc6bS00CiAgICAgICAgICAgICAgc2hhZG93LW1kCiAgICAgICAgICAgICAgaG92ZXI6c2hhZG93LWxnCiAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS0xMDAKICAgICAgICAgICAgICByb3VuZGVkLWxnCiAgICAgICAgICAgICAgYmctd2hpdGUKICAgICAgICAgICAgICBteS0xMgogICAgICAgICAgICAgIG14LTgKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTQiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LWxnIG15LTIgdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgIEJpYW5uZWx5IFRvcmliaW8KICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgTXkgbmFtZSBpcyBCaWFubmVseSBUb3JpYmlvIGFuZCBJIGFtIDE4IHllYXJzIG9sZC4gTXkgZmF2b3JpdGUgY29sb3IgaXMgeWVsbG93IGFuZCBJIGxpa2UgdG8gcGxheSBzb2NjZXIuIE15IGZhdm9yaXRlIGhvYmJpZXMgYXJlOiBzbGVlcGluZywgcmVhZGluZyBhbmQgZWF0aW5nLgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vY3NzdW1tZXJjYW1wZC1yLmdpdGh1Yi5pby9iaWFubmVseXBvcnRmb2xpbzIxLyIKICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktNzAwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1mdWxsCiAgICAgICAgICAgICAgICAgICAgcHktMgogICAgICAgICAgICAgICAgICAgIHB4LTMKICAgICAgICAgICAgICAgICAgICBmb250LXNlbWlib2xkCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6dGV4dC13aGl0ZQogICAgICAgICAgICAgICAgICAgIGJnLWdyYXktNDAwCiAgICAgICAgICAgICAgICAgICAgdGV4dC1ncmF5LTEwMAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID5TZWUgcG9ydGZvbGlvPC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImxnOmZsZXggaXRlbXMtY2VudGVyIGNvbnRhaW5lciBteC1hdXRvIG15LWF1dG8iPgogICAgICAgICAgPCEtLSBDYW1pbCBOaWNvbGUgSW5vYSBQZXJhbHRhIC0tPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgbGc6bS00CiAgICAgICAgICAgICAgc2hhZG93LW1kCiAgICAgICAgICAgICAgaG92ZXI6c2hhZG93LWxnCiAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS0xMDAKICAgICAgICAgICAgICByb3VuZGVkLWxnCiAgICAgICAgICAgICAgYmctd2hpdGUKICAgICAgICAgICAgICBteS0xMgogICAgICAgICAgICAgIG14LTgKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTQiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LWxnIG15LTIgdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgIENhbWlsIE5pY29sZSBJbm9hIFBlcmFsdGEKICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgTXkgbmFtZSBpcyBDYW1pbCBJbm9hLCBJIGFtIDE2IHllYXJzIG9sZC4gSSBsaWtlIHRvIHdhdGNoIHNlcmllcywKICAgICAgICAgICAgICAgIGxpc3RlbmluZyB0byBtdXNpYywgcmVhZGluZyBhbmQgbWFrZXVwLiBNeSBmYXZvcml0ZSBjb2xvciBpcwogICAgICAgICAgICAgICAgcHVycGxlLiBXaGVuIEkgZ3JvdyB1cCBJIHdhbnQgdG8gc3R1ZHkgdG91cmlzbSwgYXJ0cwogICAgICAgICAgICAgICAgY2luZW1hdG9ncmFwaGljIGZpbG1zIGFuZCB0aGUgdGVhY2hpbmcgcHJvZmVzc2lvbi4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2Nzc3VtbWVyY2FtcGQtci5naXRodWIuaW8vY2FtaWxwb3J0Zm9saW8yMS8iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTcwMAogICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtZnVsbAogICAgICAgICAgICAgICAgICAgIHB5LTIKICAgICAgICAgICAgICAgICAgICBweC0zCiAgICAgICAgICAgICAgICAgICAgZm9udC1zZW1pYm9sZAogICAgICAgICAgICAgICAgICAgIGhvdmVyOnRleHQtd2hpdGUKICAgICAgICAgICAgICAgICAgICBiZy1ncmF5LTQwMAogICAgICAgICAgICAgICAgICAgIHRleHQtZ3JheS0xMDAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+U2VlIHBvcnRmb2xpbzwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSBDbGF1ZGlhIEZlcnJlcmEgTWF0ZW8gLS0+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICBsZzptLTQKICAgICAgICAgICAgICBzaGFkb3ctbWQKICAgICAgICAgICAgICBob3ZlcjpzaGFkb3ctbGcKICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTEwMAogICAgICAgICAgICAgIHJvdW5kZWQtbGcKICAgICAgICAgICAgICBiZy13aGl0ZQogICAgICAgICAgICAgIG15LTEyCiAgICAgICAgICAgICAgbXgtOAogICAgICAgICAgICAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtNCI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LW1lZGl1bSB0ZXh0LWJsYWNrIHRleHQtbGcgbXktMiB1cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgQ2xhdWRpYSBGZXJyZXJhIE1hdGVvCiAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgIE15IG5hbWUgaXMgQ2xhdWRpYSBGZXJyZXJhLCBhbmQgSSBhbSAxOCB5ZWFycyBvbGQuIE15IGNvbG9yCiAgICAgICAgICAgICAgICBNeSBmYXZvcml0ZSBpcyBibHVlIGFuZCBJIGxpa2UgdG8gcGxheSB0ZW5uaXMsIHNvY2NlciBhbmQgdm9sbGV5YmFsbC4KICAgICAgICAgICAgICAgIE15IGZhdm9yaXRlIGhvYmJpZXMgYXJlOiBzbGVlcGluZywgZWF0aW5nIGFuZCB3YXRjaGluZyBtdXNpYyBzaG93cy4KICAgICAgICAgICAgICAgIFRWLiBJbiB0aGUgZnV0dXJlIEkgd291bGQgbGlrZSB0byBiZSBhIHN0ZXdhcmRlc3MuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTUiPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9jc3N1bW1lcmNhbXBkLXIuZ2l0aHViLmlvL2NsYXVkaWFwb3J0Zm9saW8yMS8iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTcwMAogICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtZnVsbAogICAgICAgICAgICAgICAgICAgIHB5LTIKICAgICAgICAgICAgICAgICAgICBweC0zCiAgICAgICAgICAgICAgICAgICAgZm9udC1zZW1pYm9sZAogICAgICAgICAgICAgICAgICAgIGhvdmVyOnRleHQtd2hpdGUKICAgICAgICAgICAgICAgICAgICBiZy1ncmF5LTQwMAogICAgICAgICAgICAgICAgICAgIHRleHQtZ3JheS0xMDAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+U2VlIHBvcnRmb2xpbzwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSBFdWxlaWR5IEfDs21leiBIZXJuw6FuZGV6IC0tPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgbGc6bS00CiAgICAgICAgICAgICAgc2hhZG93LW1kCiAgICAgICAgICAgICAgaG92ZXI6c2hhZG93LWxnCiAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS0xMDAKICAgICAgICAgICAgICByb3VuZGVkLWxnCiAgICAgICAgICAgICAgYmctd2hpdGUKICAgICAgICAgICAgICBteS0xMgogICAgICAgICAgICAgIG14LTgKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTQiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LWxnIG15LTIgdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgIEV1bGVpZHkgR8OzbWV6IEhlcm7DoW5kZXoKICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgSGVsbG8hIE15IG5hbWUgaXMgRXVsZWlkeSBHw7NtZXogYW5kIEkgYW0gMTQgeWVhcnMgb2xkLiBJIGxpa2UKICAgICAgICAgICAgICAgIGEgbG90IG9mIHJlYWRpbmcsIGxpc3RlbmluZyB0byBtdXNpYywgd2F0Y2hpbmcgbW92aWVzIGFuZCBhY3RpbmcuIFdoZW4KICAgICAgICAgICAgICAgIEkgYW0gb2YgbGVnYWwgYWdlIEkgd2FudCB0byBzdHVkeSBtZWRpY2luZSBvciBhcnRzCiAgICAgICAgICAgICAgICBjaW5lbWF0b2dyYXBoaWMsIGJlaW5nIGFuIGFjdHJlc3Mgb3IgYSBmaWxtIGRpcmVjdG9yLiBNeSBjb2xvcgogICAgICAgICAgICAgICAgZmF2b3JpdGUgaXMgcHVycGxlIGFuZCBpZiB0aGlzIGRpZCBub3QgZXhpc3QsIGl0IHdvdWxkIGJlIGJsdWUKICAgICAgICAgICAgICAgIG5hdnkgb3IgYm9uZGkgYmx1ZS4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2Nzc3VtbWVyY2FtcGQtci5naXRodWIuaW8vZXVsZWlkeXBvcnRmb2xpbzIxLyIKICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktNzAwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1mdWxsCiAgICAgICAgICAgICAgICAgICAgcHktMgogICAgICAgICAgICAgICAgICAgIHB4LTMKICAgICAgICAgICAgICAgICAgICBmb250LXNlbWlib2xkCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6dGV4dC13aGl0ZQogICAgICAgICAgICAgICAgICAgIGJnLWdyYXktNDAwCiAgICAgICAgICAgICAgICAgICAgdGV4dC1ncmF5LTEwMAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID5TZWUgcG9ydGZvbGlvPC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImxnOmZsZXggaXRlbXMtY2VudGVyIGNvbnRhaW5lciBteC1hdXRvIG15LWF1dG8iPgogICAgICAgICAgPCEtLSBLYXRoaWZlciBGZXJuYW5kYSBSb2Ryw61ndWV6IEppbcOpbmV6IC0tPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgbGc6bS00CiAgICAgICAgICAgICAgc2hhZG93LW1kCiAgICAgICAgICAgICAgaG92ZXI6c2hhZG93LWxnCiAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS0xMDAKICAgICAgICAgICAgICByb3VuZGVkLWxnCiAgICAgICAgICAgICAgYmctd2hpdGUKICAgICAgICAgICAgICBteS0xMgogICAgICAgICAgICAgIG14LTgKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTQiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LWxnIG15LTIgdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgIEthdGhpZmVyIEZlcm5hbmRhIFJvZHLDrWd1ZXogSmltw6luZXoKICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgTXkgbmFtZSBpcyBLYXRoaWZlciBSb2Ryw61ndWV6IEkgYW0gMTUgeWVhcnMgb2xkLiBNeSBjb2xvcgogICAgICAgICAgICAgICAgTXkgZmF2b3JpdGUgaXMgcHVycGxlIGFuZCBJIGxpa2Ugdm9sbGV5YmFsbC4gSSdtIGludGVyZXN0ZWQKICAgICAgICAgICAgICAgIG1lZGljaW5lIGEgbG90IGFuZCBmb3Igbm93IEknbSBpbnRlcmVzdGVkIGluIGJlaW5nIGEKICAgICAgICAgICAgICAgIG51cnNlLgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vY3NzdW1tZXJjYW1wZC1yLmdpdGh1Yi5pby9rYXRoaWZlcnBvcnRmb2xpbzIxLyIKICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktNzAwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1mdWxsCiAgICAgICAgICAgICAgICAgICAgcHktMgogICAgICAgICAgICAgICAgICAgIHB4LTMKICAgICAgICAgICAgICAgICAgICBmb250LXNlbWlib2xkCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6dGV4dC13aGl0ZQogICAgICAgICAgICAgICAgICAgIGJnLWdyYXktNDAwCiAgICAgICAgICAgICAgICAgICAgdGV4dC1ncmF5LTEwMAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID5TZWUgcG9ydGZvbGlvPC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tIExhaXNoYSBOaWNvbGUgUG9sYW5jbyBHdXRpw6lycmV6IC0tPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgbGc6bS00CiAgICAgICAgICAgICAgc2hhZG93LW1kCiAgICAgICAgICAgICAgaG92ZXI6c2hhZG93LWxnCiAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS0xMDAKICAgICAgICAgICAgICByb3VuZGVkLWxnCiAgICAgICAgICAgICAgYmctd2hpdGUKICAgICAgICAgICAgICBteS0xMgogICAgICAgICAgICAgIG14LTgKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTQiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LWxnIG15LTIgdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgIExhaXNoYSBOaWNvbGUgUG9sYW5jbyBHdXRpw6lycmV6CiAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgIE15IG5hbWUgaXMgTGFpc2hhIFBvbGFuY28sIGFuZCBJIGFtIDE0IHllYXJzIG9sZC4gSW4gTXlzZWxmCiAgICAgICAgICAgICAgICBmcmVlIHRpbWUgSSBsaWtlIHRvIHBsYXkgd2l0aCBteSBmcmllbmRzIGFuZCB1c2UgdGhlCiAgICAgICAgICAgICAgICB0ZWNobm9sb2d5LiBJIGFtIHZlcnkgaW50ZXJlc3RlZCBpbiB0aGUgaGVhbHRoIG9mIG91ciBwbGFuZXQuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTUiPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9jc3N1bW1lcmNhbXBkLXIuZ2l0aHViLmlvL2xhaXNoYXBvcnRmb2xpbzIxLyIKICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktNzAwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1mdWxsCiAgICAgICAgICAgICAgICAgICAgcHktMgogICAgICAgICAgICAgICAgICAgIHB4LTMKICAgICAgICAgICAgICAgICAgICBmb250LXNlbWlib2xkCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6dGV4dC13aGl0ZQogICAgICAgICAgICAgICAgICAgIGJnLWdyYXktNDAwCiAgICAgICAgICAgICAgICAgICAgdGV4dC1ncmF5LTEwMAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID5TZWUgcG9ydGZvbGlvPC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tIExpbmV0dGUgTGVvbmFyZG8gRG9tw61uZ3VleiAtLT4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgIGxnOm0tNAogICAgICAgICAgICAgIHNoYWRvdy1tZAogICAgICAgICAgICAgIGhvdmVyOnNoYWRvdy1sZwogICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktMTAwCiAgICAgICAgICAgICAgcm91bmRlZC1sZwogICAgICAgICAgICAgIGJnLXdoaXRlCiAgICAgICAgICAgICAgbXktMTIKICAgICAgICAgICAgICBteC04CiAgICAgICAgICAgICIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icC00Ij4KICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtbWVkaXVtIHRleHQtYmxhY2sgdGV4dC1sZyBteS0yIHVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICBMaW5ldHRlIExlb25hcmRvIERvbcOtbmd1ZXoKICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgTXkgbmFtZSBpcyBMaW5ldHRlIExlb25hcmRvLCBhbmQgSSBhbSAxMyB5ZWFycyBvbGQuIEkgbG92ZSB0aGUKICAgICAgICAgICAgICAgIGNpbmVtYXRpYyB3b3JsZCBvZiBNYXJ2ZWwgYW5kIEhhcnJ5IFBvdHRlci4gV2hlbmV2ZXIKICAgICAgICAgICAgICAgIEkgYW0gaW50ZXJlc3RlZCBpbiBiZWluZyBhIHN0ZXdhcmRlc3MsIGEgbW9kZWwsIG9yIGFuIGFjdHJlc3MuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTUiPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9jc3N1bW1lcmNhbXBkLXIuZ2l0aHViLmlvL2xpbmV0dGVwb3J0Zm9saW8yMS8iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTcwMAogICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtZnVsbAogICAgICAgICAgICAgICAgICAgIHB5LTIKICAgICAgICAgICAgICAgICAgICBweC0zCiAgICAgICAgICAgICAgICAgICAgZm9udC1zZW1pYm9sZAogICAgICAgICAgICAgICAgICAgIGhvdmVyOnRleHQtd2hpdGUKICAgICAgICAgICAgICAgICAgICBiZy1ncmF5LTQwMAogICAgICAgICAgICAgICAgICAgIHRleHQtZ3JheS0xMDAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+U2VlIHBvcnRmb2xpbzwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJsZzpmbGV4IGl0ZW1zLWNlbnRlciBjb250YWluZXIgbXgtYXV0byBteS1hdXRvIj4KICAgICAgICAgIDwhLS0gUnV0aCBNYXJpZWwgTWFydMOtbmV6IFZhbGVyaW8gLS0+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICBsZzptLTQKICAgICAgICAgICAgICBzaGFkb3ctbWQKICAgICAgICAgICAgICBob3ZlcjpzaGFkb3ctbGcKICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTEwMAogICAgICAgICAgICAgIHJvdW5kZWQtbGcKICAgICAgICAgICAgICBiZy13aGl0ZQogICAgICAgICAgICAgIG15LTEyCiAgICAgICAgICAgICAgbXgtOAogICAgICAgICAgICAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtNCI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LW1lZGl1bSB0ZXh0LWJsYWNrIHRleHQtbGcgbXktMiB1cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgUnV0aCBNYXJpZWwgTWFydMOtbmV6IFZhbGVyaW8KICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPgogICAgICAgICAgICAgICAgTXkgbmFtZSBpcyBSdXRoIE1hcmllbCBNYXJ0aW5leiBWYWxlcmlvLiBJIHJlYWxseSBsaWtlIHRoZQogICAgICAgICAgICAgICAgdGVjaG5vbG9neSwgSSBsaWtlIG11c2ljLCBJIGxvdmUgZXhwbG9yaW5nIHRoZQogICAgICAgICAgICAgICAgbmF0dXJlIGFuZCBzcGVuZGluZyB0aW1lIHdpdGggbXkgZnJpZW5kcyBhbmQgZmFtaWx5LgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vY3NzdW1tZXJjYW1wZC1yLmdpdGh1Yi5pby9ydXRocG9ydGZvbGlvMjEvIgogICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS03MDAKICAgICAgICAgICAgICAgICAgICByb3VuZGVkLWZ1bGwKICAgICAgICAgICAgICAgICAgICBweS0yCiAgICAgICAgICAgICAgICAgICAgcHgtMwogICAgICAgICAgICAgICAgICAgIGZvbnQtc2VtaWJvbGQKICAgICAgICAgICAgICAgICAgICBob3Zlcjp0ZXh0LXdoaXRlCiAgICAgICAgICAgICAgICAgICAgYmctZ3JheS00MDAKICAgICAgICAgICAgICAgICAgICB0ZXh0LWdyYXktMTAwCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPlNlZSBwb3J0Zm9saW88L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS0gU2hhcmxlbnlzIFNvc2EgUm9kcsOtZ3VleiAtLT4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgIGxnOm0tNAogICAgICAgICAgICAgIHNoYWRvdy1tZAogICAgICAgICAgICAgIGhvdmVyOnNoYWRvdy1sZwogICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktMTAwCiAgICAgICAgICAgICAgcm91bmRlZC1sZwogICAgICAgICAgICAgIGJnLXdoaXRlCiAgICAgICAgICAgICAgbXktMTIKICAgICAgICAgICAgICBteC04CiAgICAgICAgICAgICIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icC00Ij4KICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtbWVkaXVtIHRleHQtYmxhY2sgdGV4dC1sZyBteS0yIHVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICBTaGFybGVueXMgU29zYSBSb2Ryw61ndWV6CiAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgIE15IG5hbWUgaXMgU2hhcmxlbnlzIEkgYW0gMTMgeWVhcnMgb2xkLiBJIGxpa2UgdG8gZGFuY2UsIGRvCiAgICAgICAgICAgICAgICBqb2tlcywgYW5kIGhlbHAgb3RoZXJzIHdpdGggd2hhdCB0aGV5IG5lZWQgYXMgd2hhdAogICAgICAgICAgICAgICAgSSBkaWQgaW4gbXkgZmluYWwgcHJvamVjdC4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2Nzc3VtbWVyY2FtcGQtci5naXRodWIuaW8vc2hhcmxlbnlzcG9yZm9saW8yMS8iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTcwMAogICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtZnVsbAogICAgICAgICAgICAgICAgICAgIHB5LTIKICAgICAgICAgICAgICAgICAgICBweC0zCiAgICAgICAgICAgICAgICAgICAgZm9udC1zZW1pYm9sZAogICAgICAgICAgICAgICAgICAgIGhvdmVyOnRleHQtd2hpdGUKICAgICAgICAgICAgICAgICAgICBiZy1ncmF5LTQwMAogICAgICAgICAgICAgICAgICAgIHRleHQtZ3JheS0xMDAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+U2VlIHBvcnRmb2xpbzwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPCEtLSBWYW5lc3NhIEZyYW5jaGVza2EgRGlheiAtLT4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgIGxnOm0tNAogICAgICAgICAgICAgIHNoYWRvdy1tZAogICAgICAgICAgICAgIGhvdmVyOnNoYWRvdy1sZwogICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktMTAwCiAgICAgICAgICAgICAgcm91bmRlZC1sZwogICAgICAgICAgICAgIGJnLXdoaXRlCiAgICAgICAgICAgICAgbXktMTIKICAgICAgICAgICAgICBteC04CiAgICAgICAgICAgICIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icC00Ij4KICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtbWVkaXVtIHRleHQtYmxhY2sgdGV4dC1sZyBteS0yIHVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICBWYW5lc3NhIEZyYW5jaGVza2EgRGlhegogICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSI+CiAgICAgICAgICAgICAgICBNeSBuYW1lIGlzIFZhbmVzc2EgRnJhbmNoZXNrYSBEw61heiBhbmQgSSBhbSAxOSB5ZWFycyBvbGQuIE15CiAgICAgICAgICAgICAgICBGYXZvcml0ZSBjb2xvcnMgYXJlIHBpbmssIGJsYWNrLCB3aGl0ZSwgYW5kIHB1cnBsZS4gSQogICAgICAgICAgICAgICAgSSBsaWtlIHRvIHBsYXkgdm9sbGV5YmFsbCBhbmQgSSBhc3BpcmUgdG8gc3R1ZHkgYXQgYSB1bml2ZXJzaXR5IGluCiAgICAgICAgICAgICAgICB0aGUgVW5pdGVkIFN0YXRlcy4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2Nzc3VtbWVyY2FtcGQtci5naXRodWIuaW8vdmFuZXNzYXBvcnRmb2xpbzIxLyIKICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktNzAwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1mdWxsCiAgICAgICAgICAgICAgICAgICAgcHktMgogICAgICAgICAgICAgICAgICAgIHB4LTMKICAgICAgICAgICAgICAgICAgICBmb250LXNlbWlib2xkCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6dGV4dC13aGl0ZQogICAgICAgICAgICAgICAgICAgIGJnLWdyYXktNDAwCiAgICAgICAgICAgICAgICAgICAgdGV4dC1ncmF5LTEwMAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID5TZWUgcG9ydGZvbGlvPC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImxnOmZsZXggaXRlbXMtY2VudGVyIGNvbnRhaW5lciBteC1hdXRvIG15LWF1dG8iPgogICAgICAgICAgPCEtLSBZYXJpdHphIEhlcnJlcmEgLS0+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICBsZzptLTQKICAgICAgICAgICAgICBzaGFkb3ctbWQKICAgICAgICAgICAgICBob3ZlcjpzaGFkb3ctbGcKICAgICAgICAgICAgICBob3ZlcjpiZy1ncmF5LTEwMAogICAgICAgICAgICAgIHJvdW5kZWQtbGcKICAgICAgICAgICAgICBiZy13aGl0ZQogICAgICAgICAgICAgIG15LTEyCiAgICAgICAgICAgICAgbXgtOAogICAgICAgICAgICAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtNCI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJmb250LW1lZGl1bSB0ZXh0LWJsYWNrIHRleHQtbGcgbXktMiB1cHBlcmNhc2UiPgogICAgICAgICAgICAgICAgWWFyaXR6YSBIZXJyZXJhCiAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgIE15IG5hbWUgaXMgWWFyaXR6YSBhbmQgSSBhbSAxNCB5ZWFycyBvbGQuIEknbSBmcm9tIExhIFBpw7FhIGFuZCBJIGxpdmUgd2l0aCBtZQogICAgICAgICAgICAgICAgZ29kbW90aGVyLiBXaGVuIEkgZ3JvdyB1cCBJIHdvdWxkIGxpa2UgdG8gYmUgaW4gdGhlIG1pbGl0YXJ5LgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vY3NzdW1tZXJjYW1wZC1yLmdpdGh1Yi5pby95YXJpdHphcG9ydGZvbGlvMjEvIgogICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS03MDAKICAgICAgICAgICAgICAgICAgICByb3VuZGVkLWZ1bGwKICAgICAgICAgICAgICAgICAgICBweS0yCiAgICAgICAgICAgICAgICAgICAgcHgtMwogICAgICAgICAgICAgICAgICAgIGZvbnQtc2VtaWJvbGQKICAgICAgICAgICAgICAgICAgICBob3Zlcjp0ZXh0LXdoaXRlCiAgICAgICAgICAgICAgICAgICAgYmctZ3JheS00MDAKICAgICAgICAgICAgICAgICAgICB0ZXh0LWdyYXktMTAwCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPlNlZSBwb3J0Zm9saW88L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS0gWWFzbWVpcnluIEFsdGFncmFjaWEgUm9kcsOtZ3VleiAtLT4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgIGxnOm0tNAogICAgICAgICAgICAgIHNoYWRvdy1tZAogICAgICAgICAgICAgIGhvdmVyOnNoYWRvdy1sZwogICAgICAgICAgICAgIGhvdmVyOmJnLWdyYXktMTAwCiAgICAgICAgICAgICAgcm91bmRlZC1sZwogICAgICAgICAgICAgIGJnLXdoaXRlCiAgICAgICAgICAgICAgbXktMTIKICAgICAgICAgICAgICBteC04CiAgICAgICAgICAgICIKICAgICAgICAgID4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icC00Ij4KICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZvbnQtbWVkaXVtIHRleHQtYmxhY2sgdGV4dC1sZyBteS0yIHVwcGVyY2FzZSI+CiAgICAgICAgICAgICAgICBZYXNtZWlyeW4gQWx0YWdyYWNpYSBSb2Ryw61ndWV6CiAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1qdXN0aWZ5Ij4KICAgICAgICAgICAgICAgIEkgYW0gMTMgeWVhcnMgb2xkIEkgc3R1ZHkgYSBsb3QuIEkgbGlrZQogICAgICAgICAgICAgICAgaGVscCBtYW55IHBlb3BsZSwgSSByZWFsbHkgbGlrZSB0aGlzIGNvdXJzZSBvZgogICAgICAgICAgICAgICAgY29tcHV0ZXIgc2NpZW5jZSBhbmQgSSBsb3ZlIG1hdGguIFdoZW4gSSBncm93IHVwCiAgICAgICAgICAgICAgICBJIHdhbnQgdG8gYmUgYW4gYWNjb3VudGFudC4KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2Nzc3VtbWVyY2FtcGQtci5naXRodWIuaW8veWFzbWVpcnlucG9ydGZvbGlvMjEvIgogICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS03MDAKICAgICAgICAgICAgICAgICAgICByb3VuZGVkLWZ1bGwKICAgICAgICAgICAgICAgICAgICBweS0yCiAgICAgICAgICAgICAgICAgICAgcHgtMwogICAgICAgICAgICAgICAgICAgIGZvbnQtc2VtaWJvbGQKICAgICAgICAgICAgICAgICAgICBob3Zlcjp0ZXh0LXdoaXRlCiAgICAgICAgICAgICAgICAgICAgYmctZ3JheS00MDAKICAgICAgICAgICAgICAgICAgICB0ZXh0LWdyYXktMTAwCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPlNlZSBwb3J0Zm9saW88L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS0gWW9uYWlyeSBUZXJlc2EgQWxtb250ZSBUb3JpYmlvIC0tPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgbGc6bS00CiAgICAgICAgICAgICAgc2hhZG93LW1kCiAgICAgICAgICAgICAgaG92ZXI6c2hhZG93LWxnCiAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS0xMDAKICAgICAgICAgICAgICByb3VuZGVkLWxnCiAgICAgICAgICAgICAgYmctd2hpdGUKICAgICAgICAgICAgICBteS0xMgogICAgICAgICAgICAgIG14LTgKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTQiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1tZWRpdW0gdGV4dC1ibGFjayB0ZXh0LWxnIG15LTIgdXBwZXJjYXNlIj4KICAgICAgICAgICAgICAgIFlvbmFpcnkgVGVyZXNhIEFsbW9udGUgVG9yaWJpbwogICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSI+CiAgICAgICAgICAgICAgICBNeSBuYW1lIGlzIFlvbmFpcnkgYW5kIEkgYW0gMTMgeWVhcnMgb2xkLiBJIGxpa2UgdG8gaGVscAogICAgICAgICAgICAgICAgb3RoZXJzIGFzIEkgYW0gZ29pbmcgdG8gZG8gd2l0aCBteSBmaW5hbCBwcm9qZWN0LiBtZSB0b28KICAgICAgICAgICAgICAgIGxpa2UgdG8gZGFuY2UsIHNwZW5kIGEgbG90IG9mIHRpbWUgd2l0aCBteSBmcmllbmRzLgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vY3NzdW1tZXJjYW1wZC1yLmdpdGh1Yi5pby95b25haXJ5cG9ydGZvbGlvMjEvIgogICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaG92ZXI6YmctZ3JheS03MDAKICAgICAgICAgICAgICAgICAgICByb3VuZGVkLWZ1bGwKICAgICAgICAgICAgICAgICAgICBweS0yCiAgICAgICAgICAgICAgICAgICAgcHgtMwogICAgICAgICAgICAgICAgICAgIGZvbnQtc2VtaWJvbGQKICAgICAgICAgICAgICAgICAgICBob3Zlcjp0ZXh0LXdoaXRlCiAgICAgICAgICAgICAgICAgICAgYmctZ3JheS00MDAKICAgICAgICAgICAgICAgICAgICB0ZXh0LWdyYXktMTAwCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPlNlZSBwb3J0Zm9saW88L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+CiAgPHNlY3Rpb24gY2xhc3M9ImgtZnVsbCBiZy1ncmF5LTgwMCI+CiAgICA8ZGl2IGNsYXNzPSJweS02IHB4LTE2IGZsZXgganVzdGlmeS1iZXR3ZWVuIj4KICAgICAgPGRpdj4KICAgICAgICA8aW1nIGNsYXNzPSJmb290ZXJsb2dvIiBzcmM9Ii4uL2Fzc2V0cy9sb2dvLnBuZyIgLz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImJvcmRlci10LTIgbXgtMTAgYm9yZGVyLWdyYXktNTAwIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InB5LTQgcHktNiBweC0xNiBmbGV4IGp1c3RpZnktYmV0d2VlbiI+CiAgICAgIDxkaXY+CiAgICAgICAgPGgxIGNsYXNzPSJmb250LXNlbWlib2xkIHRleHQtd2hpdGUgdGV4dC1zbSI+Q1NTVU1NRVJEUiBAIDIwMjE8L2gxPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KPC9kaXY+Cg=="},null]}