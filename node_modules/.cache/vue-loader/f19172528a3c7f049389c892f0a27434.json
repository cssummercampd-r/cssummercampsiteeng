{"remainingRequest":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikael/Documents/cssummercampsite/src/components/Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"/Users/mikael/Documents/cssummercampsite/src/components/Home.vue","mtime":1627572293926},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}