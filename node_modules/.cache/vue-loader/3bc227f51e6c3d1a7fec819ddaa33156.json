{"remainingRequest":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikael/Documents/cssummercampsite/src/components/studentp.vue?vue&type=template&id=1dc7bf25&","dependencies":[{"path":"/Users/mikael/Documents/cssummercampsite/src/components/studentp.vue","mtime":1627565769539},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}