{"remainingRequest":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikael/Documents/engcssummercampsite/src/components/studentp.vue?vue&type=template&id=04292c14&","dependencies":[{"path":"/Users/mikael/Documents/engcssummercampsite/src/components/studentp.vue","mtime":1628998638887},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/engcssummercampsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}