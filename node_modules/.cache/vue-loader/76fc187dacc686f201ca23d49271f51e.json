{"remainingRequest":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikael/Documents/cssummercampsite/src/components/Home.vue?vue&type=template&id=5cdf1a7c&","dependencies":[{"path":"/Users/mikael/Documents/cssummercampsite/src/components/Home.vue","mtime":1628259055071},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikael/Documents/cssummercampsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}